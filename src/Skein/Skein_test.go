package Skein

import (
    "encoding/hex"
    "strings"
    "testing"
)

func Test_Skein_256_256_1(t *testing.T) {
    s := NewSimpleSkein(32, 256)
    message := []byte{0xFF}

    correct := "0B98DCD198EA0E50A7A244C444E25C23DA30C10FC9A1F270A6637F1F34E67ED2"
    computed := strings.ToUpper(hex.EncodeToString(s.SimpleHash(message)))

    if computed != correct {
        t.Error("Test_Skein_256_256_1 failed: incorrect hash value returned!")
    }
}

func Test_Skein_256_256_2(t *testing.T) {
    s := NewSimpleSkein(32, 256)
    message := []byte{0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8,
                      0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
                      0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8,
                      0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0}

    correct := "8D0FA4EF777FD759DFD4044E6F6A5AC3C774AEC943DCFC07927B723B5DBF408B"
    computed := strings.ToUpper(hex.EncodeToString(s.SimpleHash(message)))

    if computed != correct {
        t.Error("Test_Skein_256_256_2 failed: incorrect hash value returned!")
    }
}

func Test_Skein_256_256_3(t *testing.T) {
    s := NewSimpleSkein(32, 256)
    message := []byte{0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8,
                      0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
                      0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8,
                      0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0,
                      0xDF, 0xDE, 0xDD, 0xDC, 0xDB, 0xDA, 0xD9, 0xD8,
                      0xD7, 0xD6, 0xD5, 0xD4, 0xD3, 0xD2, 0xD1, 0xD0,
                      0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA, 0xC9, 0xC8,
                      0xC7, 0xC6, 0xC5, 0xC4, 0xC3, 0xC2, 0xC1, 0xC0}

    correct := "DF28E916630D0B44C4A849DC9A02F07A07CB30F732318256B15D865AC4AE162F"
    computed := strings.ToUpper(hex.EncodeToString(s.SimpleHash(message)))

    if computed != correct {
        t.Error("Test_Skein_256_256_3 failed: incorrect hash value returned!")
    }
}

func Test_Skein_512_512_1(t *testing.T) {
    s := NewSimpleSkein(64, 512)
    message := []byte{0xFF}

    correct := "71B7BCE6FE6452227B9CED6014249E5BF9A9754C3AD618CCC4E0AAE16B316CC8" +
               "CA698D864307ED3E80B6EF1570812AC5272DC409B5A012DF2A579102F340617A"
    computed := strings.ToUpper(hex.EncodeToString(s.SimpleHash(message)))

    if computed != correct {
        t.Error("Test_Skein_512_512_1 failed: incorrect hash value returned!")
    }
}

func Test_Skein_512_512_2(t *testing.T) {
    s := NewSimpleSkein(64, 512)
    message := []byte{0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8,
                      0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
                      0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8,
                      0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0,
                      0xDF, 0xDE, 0xDD, 0xDC, 0xDB, 0xDA, 0xD9, 0xD8,
                      0xD7, 0xD6, 0xD5, 0xD4, 0xD3, 0xD2, 0xD1, 0xD0,
                      0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA, 0xC9, 0xC8,
                      0xC7, 0xC6, 0xC5, 0xC4, 0xC3, 0xC2, 0xC1, 0xC0}

    correct := "45863BA3BE0C4DFC27E75D358496F4AC9A736A505D9313B42B2F5EADA79FC17F" +
               "63861E947AFB1D056AA199575AD3F8C9A3CC1780B5E5FA4CAE050E989876625B"
    computed := strings.ToUpper(hex.EncodeToString(s.SimpleHash(message)))

    if computed != correct {
        t.Error("Test_Skein_512_512_2 failed: incorrect hash value returned!")
    }
}

func Test_Skein_512_512_3(t *testing.T) {
    s := NewSimpleSkein(64, 512)
    message := []byte{0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8,
                      0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
                      0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8,
                      0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0,
                      0xDF, 0xDE, 0xDD, 0xDC, 0xDB, 0xDA, 0xD9, 0xD8,
                      0xD7, 0xD6, 0xD5, 0xD4, 0xD3, 0xD2, 0xD1, 0xD0,
                      0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA, 0xC9, 0xC8,
                      0xC7, 0xC6, 0xC5, 0xC4, 0xC3, 0xC2, 0xC1, 0xC0,
                      0xBF, 0xBE, 0xBD, 0xBC, 0xBB, 0xBA, 0xB9, 0xB8,
                      0xB7, 0xB6, 0xB5, 0xB4, 0xB3, 0xB2, 0xB1, 0xB0,
                      0xAF, 0xAE, 0xAD, 0xAC, 0xAB, 0xAA, 0xA9, 0xA8,
                      0xA7, 0xA6, 0xA5, 0xA4, 0xA3, 0xA2, 0xA1, 0xA0,
                      0x9F, 0x9E, 0x9D, 0x9C, 0x9B, 0x9A, 0x99, 0x98,
                      0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90,
                      0x8F, 0x8E, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x88,
                      0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80}

    correct := "91CCA510C263C4DDD010530A33073309628631F308747E1BCBAA90E451CAB92E" +
               "5188087AF4188773A332303E6667A7A210856F742139000071F48E8BA2A5ADB7"
    computed := strings.ToUpper(hex.EncodeToString(s.SimpleHash(message)))

    if computed != correct {
        t.Error("Test_Skein_512_512_3 failed: incorrect hash value returned!")
    }
}

func Test_Skein_1024_1024_1(t *testing.T) {
    s := NewSimpleSkein(128, 1024)
    message := []byte{0xFF}

    correct := "E62C05802EA0152407CDD8787FDA9E35703DE862A4FBC119CFF8590AFE79250B" +
               "CCC8B3FAF1BD2422AB5C0D263FB2F8AFB3F796F048000381531B6F00D85161BC" +
               "0FFF4BEF2486B1EBCD3773FABF50AD4AD5639AF9040E3F29C6C931301BF79832" +
               "E9DA09857E831E82EF8B4691C235656515D437D2BDA33BCEC001C67FFDE15BA8"
    computed := strings.ToUpper(hex.EncodeToString(s.SimpleHash(message)))

    if computed != correct {
        t.Error("Test_Skein_1024_1024_1 failed: incorrect hash value returned!")
    }
}

func Test_Skein_1024_1024_2(t *testing.T) {
    s := NewSimpleSkein(128, 1024)
    message := []byte{0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8,
                      0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
                      0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8,
                      0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0,
                      0xDF, 0xDE, 0xDD, 0xDC, 0xDB, 0xDA, 0xD9, 0xD8,
                      0xD7, 0xD6, 0xD5, 0xD4, 0xD3, 0xD2, 0xD1, 0xD0,
                      0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA, 0xC9, 0xC8,
                      0xC7, 0xC6, 0xC5, 0xC4, 0xC3, 0xC2, 0xC1, 0xC0,
                      0xBF, 0xBE, 0xBD, 0xBC, 0xBB, 0xBA, 0xB9, 0xB8,
                      0xB7, 0xB6, 0xB5, 0xB4, 0xB3, 0xB2, 0xB1, 0xB0,
                      0xAF, 0xAE, 0xAD, 0xAC, 0xAB, 0xAA, 0xA9, 0xA8,
                      0xA7, 0xA6, 0xA5, 0xA4, 0xA3, 0xA2, 0xA1, 0xA0,
                      0x9F, 0x9E, 0x9D, 0x9C, 0x9B, 0x9A, 0x99, 0x98,
                      0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90,
                      0x8F, 0x8E, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x88,
                      0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80}

    correct := "1F3E02C46FB80A3FCD2DFBBC7C173800B40C60C2354AF551189EBF433C3D85F9" +
               "FF1803E6D920493179ED7AE7FCE69C3581A5A2F82D3E0C7A295574D0CD7D217C" +
               "484D2F6313D59A7718EAD07D0729C24851D7E7D2491B902D489194E6B7D369DB" +
               "0AB7AA106F0EE0A39A42EFC54F18D93776080985F907574F995EC6A37153A578"
    computed := strings.ToUpper(hex.EncodeToString(s.SimpleHash(message)))

    if computed != correct {
        t.Error("Test_Skein_1024_1024_2 failed: incorrect hash value returned!")
    }
}

func Test_Skein_1024_1024_3(t *testing.T) {
    s := NewSimpleSkein(128, 1024)
    message := []byte{0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8,
                      0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
                      0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8,
                      0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0,
                      0xDF, 0xDE, 0xDD, 0xDC, 0xDB, 0xDA, 0xD9, 0xD8,
                      0xD7, 0xD6, 0xD5, 0xD4, 0xD3, 0xD2, 0xD1, 0xD0,
                      0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA, 0xC9, 0xC8,
                      0xC7, 0xC6, 0xC5, 0xC4, 0xC3, 0xC2, 0xC1, 0xC0,
                      0xBF, 0xBE, 0xBD, 0xBC, 0xBB, 0xBA, 0xB9, 0xB8,
                      0xB7, 0xB6, 0xB5, 0xB4, 0xB3, 0xB2, 0xB1, 0xB0,
                      0xAF, 0xAE, 0xAD, 0xAC, 0xAB, 0xAA, 0xA9, 0xA8,
                      0xA7, 0xA6, 0xA5, 0xA4, 0xA3, 0xA2, 0xA1, 0xA0,
                      0x9F, 0x9E, 0x9D, 0x9C, 0x9B, 0x9A, 0x99, 0x98,
                      0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90,
                      0x8F, 0x8E, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x88,
                      0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80,
                      0x7F, 0x7E, 0x7D, 0x7C, 0x7B, 0x7A, 0x79, 0x78,
                      0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70,
                      0x6F, 0x6E, 0x6D, 0x6C, 0x6B, 0x6A, 0x69, 0x68,
                      0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60,
                      0x5F, 0x5E, 0x5D, 0x5C, 0x5B, 0x5A, 0x59, 0x58,
                      0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50,
                      0x4F, 0x4E, 0x4D, 0x4C, 0x4B, 0x4A, 0x49, 0x48,
                      0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40,
                      0x3F, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38,
                      0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
                      0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28,
                      0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
                      0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18,
                      0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
                      0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08,
                      0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00}

    correct := "842A53C99C12B0CF80CF69491BE5E2F7515DE8733B6EA9422DFD676665B5FA42" +
               "FFB3A9C48C217777950848CECDB48F640F81FB92BEF6F88F7A85C1F7CD1446C9" +
               "161C0AFE8F25AE444F40D3680081C35AA43F640FD5FA3C3C030BCC06ABAC01D0" +
               "98BCC984EBD8322712921E00B1BA07D6D01F26907050255EF2C8E24F716C52A5"
    computed := strings.ToUpper(hex.EncodeToString(s.SimpleHash(message)))

    if computed != correct {
        t.Error("Test_Skein_1024_1024_3 failed: incorrect hash value returned!")
    }
}

