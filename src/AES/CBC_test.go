package AES

import (
	"fmt"
	"testing"
)

func checkBytes(funcName string, got, expect []byte, t *testing.T) {
	for i := range got {
		if got[i] != expect[i] {
			t.Errorf("(%s) byte %d:: expected: %02x, got: %02x\n",
				funcName, i, expect[i], got[i])
		}
	}
}

func Test_cipherBlockChainingMessageOneDecrypt(t *testing.T) {
	key := []byte{0x14, 0x0b, 0x41, 0xb2, 0x2a, 0x29, 0xbe, 0xb4,
			0x06, 0x1b, 0xda, 0x66, 0xb6, 0x74, 0x7e, 0x14}

	cipher := []byte{0x4c, 0xa0, 0x0f, 0xf4, 0xc8, 0x98, 0xd6, 0x1e,
			0x1e, 0xdb, 0xf1, 0x80, 0x06, 0x18, 0xfb, 0x28,
			0x28, 0xa2, 0x26, 0xd1, 0x60, 0xda, 0xd0, 0x78,
			0x83, 0xd0, 0x4e, 0x00, 0x8a, 0x78, 0x97, 0xee,
			0x2e, 0x4b, 0x74, 0x65, 0xd5, 0x29, 0x0d, 0x0c,
			0x0e, 0x6c, 0x68, 0x22, 0x23, 0x6e, 0x1d, 0xaa,
			0xfb, 0x94, 0xff, 0xe0, 0xc5, 0xda, 0x05, 0xd9,
			0x47, 0x6b, 0xe0, 0x28, 0xad, 0x7c, 0x1d, 0x81}

	plain, _ := cipherBlockChainingDecrypt(
			cipher[len(key):],
			key,
			cipher[:len(key)])
	
	tgt := "Basic CBC mode encryption needs padding."
	if string(plain[:40]) != tgt {
		t.Errorf("Test_cipherBlockChainingMessageOneDecrypt failed!")
	}

	fmt.Println("Test_cipherBlockChainingMessageOneDecrypt:\tPASS")
}

func Test_cipherBlockChainingMessageTwoDecrypt(t *testing.T) {
	key := []byte{0x14, 0x0b, 0x41, 0xb2, 0x2a, 0x29, 0xbe, 0xb4,
			0x06, 0x1b, 0xda, 0x66, 0xb6, 0x74, 0x7e, 0x14}

	cipher := []byte{0x5b, 0x68, 0x62, 0x9f, 0xeb, 0x86, 0x06, 0xf9,
			0xa6, 0x66, 0x76, 0x70, 0xb7, 0x5b, 0x38, 0xa5,
			0xb4, 0x83, 0x2d, 0x0f, 0x26, 0xe1, 0xab, 0x7d,
			0xa3, 0x32, 0x49, 0xde, 0x7d, 0x4a, 0xfc, 0x48,
			0xe7, 0x13, 0xac, 0x64, 0x6a, 0xce, 0x36, 0xe8,
			0x72, 0xad, 0x5f, 0xb8, 0xa5, 0x12, 0x42, 0x8a,
			0x6e, 0x21, 0x36, 0x4b, 0x0c, 0x37, 0x4d, 0xf4,
			0x55, 0x03, 0x47, 0x3c, 0x52, 0x42, 0xa2, 0x53}

	plain, _ := cipherBlockChainingDecrypt(
			cipher[len(key):],
			key,
			cipher[:len(key)])

	tgt := "Our implementation uses rand. IV"
	if string(plain[:32]) != tgt {
		t.Errorf("Test_cipherBlockChainingMessageTwoDecrypt failed!")
	}

	fmt.Println("Test_cipherBlockChainingMessageTwoDecrypt:\tPASS")
}

func Test_cipherBlockChainingMessageOneEncrypt(t *testing.T) {
	key := []byte{0x14, 0x0b, 0x41, 0xb2, 0x2a, 0x29, 0xbe, 0xb4,
			0x06, 0x1b, 0xda, 0x66, 0xb6, 0x74, 0x7e, 0x14}

	IV := []byte{0x4c, 0xa0, 0x0f, 0xf4, 0xc8, 0x98, 0xd6, 0x1e,
			0x1e, 0xdb, 0xf1, 0x80, 0x06, 0x18, 0xfb, 0x28}

	plain := []byte{0x42, 0x61, 0x73, 0x69, 0x63, 0x20, 0x43, 0x42,
			0x43, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x65,
			0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
			0x6e, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20,
			0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2e}

	correct := []byte{0x28, 0xa2, 0x26, 0xd1, 0x60, 0xda, 0xd0, 0x78,
			0x83, 0xd0, 0x4e, 0x00, 0x8a, 0x78, 0x97, 0xee,
			0x2e, 0x4b, 0x74, 0x65, 0xd5, 0x29, 0x0d, 0x0c,
			0x0e, 0x6c, 0x68, 0x22, 0x23, 0x6e, 0x1d, 0xaa,
			0xfb, 0x94, 0xff, 0xe0, 0xc5, 0xda, 0x05, 0xd9,
			0x47, 0x6b, 0xe0, 0x28, 0xad, 0x7c, 0x1d, 0x81}

	cipher, _ := cipherBlockChainingEncrypt(plain, key, IV)

	checkBytes("cipherBlockChainingMessageOneEncrypt", cipher, correct, t)

	fmt.Println("Test_cipherBlockChainingMessageOneEncrypt:\tPASS")
}

func Test_cipherBlockChainingMessageTwoEncrypt(t *testing.T) {
	key := []byte{0x14, 0x0b, 0x41, 0xb2, 0x2a, 0x29, 0xbe, 0xb4,
			0x06, 0x1b, 0xda, 0x66, 0xb6, 0x74, 0x7e, 0x14}

	IV := []byte{0x5b, 0x68, 0x62, 0x9f, 0xeb, 0x86, 0x06, 0xf9,
			0xa6, 0x66, 0x76, 0x70, 0xb7, 0x5b, 0x38, 0xa5}

	plain := []byte{0x4f, 0x75, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c,
			0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
			0x6f, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20,
			0x72, 0x61, 0x6e, 0x64, 0x2e, 0x20, 0x49, 0x56}

	correct := []byte{0xb4, 0x83, 0x2d, 0x0f, 0x26, 0xe1, 0xab, 0x7d,
			0xa3, 0x32, 0x49, 0xde, 0x7d, 0x4a, 0xfc, 0x48,
			0xe7, 0x13, 0xac, 0x64, 0x6a, 0xce, 0x36, 0xe8,
			0x72, 0xad, 0x5f, 0xb8, 0xa5, 0x12, 0x42, 0x8a,
			0x6e, 0x21, 0x36, 0x4b, 0x0c, 0x37, 0x4d, 0xf4,
			0x55, 0x03, 0x47, 0x3c, 0x52, 0x42, 0xa2, 0x53}

	cipher, _ := cipherBlockChainingEncrypt(plain, key, IV)

	checkBytes("cipherBlockChainingMessageTwoEncrypt", cipher, correct, t)

	fmt.Println("Test_cipherBlockChainingMessageTwoEncrypt:\tPASS")
}

