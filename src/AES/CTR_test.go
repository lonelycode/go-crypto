package AES

import (
    "encoding/binary"
    "testing"
)

func incCtr(ctr []byte) []byte {
    newCtr := make([]byte, len(ctr))
    val := binary.BigEndian.Uint32(ctr[12:]) + 1
    for i := 0; i < 12; i++ {
        newCtr[i] = ctr[i]
    }

    newCtr[12] = byte(val >> 24)
    newCtr[13] = byte(val >> 16)
    newCtr[14] = byte(val >> 8)
    newCtr[15] = byte(val)

    return newCtr
}

func Test_counterModeMessageOneDecrypt(t *testing.T) {
    key := []byte{0x36, 0xf1, 0x83, 0x57, 0xbe, 0x4d, 0xbd, 0x77,
                  0xf0, 0x50, 0x51, 0x5c, 0x73, 0xfc, 0xf9, 0xf2}

    ciphertext := []byte{0x69, 0xdd, 0xa8, 0x45, 0x5c, 0x7d, 0xd4, 0x25,
                         0x4b, 0xf3, 0x53, 0xb7, 0x73, 0x30, 0x4e, 0xec,
                         0x0e, 0xc7, 0x70, 0x23, 0x30, 0x09, 0x8c, 0xe7,
                         0xf7, 0x52, 0x0d, 0x1c, 0xbb, 0xb2, 0x0f, 0xc3,
                         0x88, 0xd1, 0xb0, 0xad, 0xb5, 0x05, 0x4d, 0xbd,
                         0x73, 0x70, 0x84, 0x9d, 0xbf, 0x0b, 0x88, 0xd3,
                         0x93, 0xf2, 0x52, 0xe7, 0x64, 0xf1, 0xf5, 0xf7,
                         0xad, 0x97, 0xef, 0x79, 0xd5, 0x9c, 0xe2, 0x9f,
                         0x5f, 0x51, 0xee, 0xca, 0x32, 0xea, 0xbe, 0xdd,
                         0x9a, 0xfa, 0x93, 0x29}

    plaintext, _ := counterMode(
                        ciphertext[len(key):], 
                        key, 
                        ciphertext[:len(key)], 
                        incCtr)

    tgt := "CTR mode lets you build a stream cipher from a block cipher."
    if string(plaintext[:60]) != tgt {
        t.Error("Test_counterModeMessageOneDecrypt failed!")
    }
}

func Test_counterModeMessageTwoDecrypt(t *testing.T) {
    key := []byte{0x36, 0xf1, 0x83, 0x57, 0xbe, 0x4d, 0xbd, 0x77,
                  0xf0, 0x50, 0x51, 0x5c, 0x73, 0xfc, 0xf9, 0xf2}

    ciphertext := []byte{0x77, 0x0b, 0x80, 0x25, 0x9e, 0xc3, 0x3b, 0xeb,
                         0x25, 0x61, 0x35, 0x8a, 0x9f, 0x2d, 0xc6, 0x17,
                         0xe4, 0x62, 0x18, 0xc0, 0xa5, 0x3c, 0xbe, 0xca,
                         0x69, 0x5a, 0xe4, 0x5f, 0xaa, 0x89, 0x52, 0xaa,
                         0x0e, 0x31, 0x1b, 0xde, 0x9d, 0x4e, 0x01, 0x72,
                         0x6d, 0x31, 0x84, 0xc3, 0x44, 0x51}

    plaintext, _ := counterMode(
                        ciphertext[len(key):], 
                        key, 
                        ciphertext[:len(key)], 
                        incCtr)

    tgt := "Always avoid the two time pad!"
    if string(plaintext[:30]) != tgt {
        t.Error("Test_counterModeMessageTwoDecrypt failed!")
    }
}

func Test_counterModeMessageOneEncrypt(t *testing.T) {
    key := []byte{0x36, 0xf1, 0x83, 0x57, 0xbe, 0x4d, 0xbd, 0x77,
                  0xf0, 0x50, 0x51, 0x5c, 0x73, 0xfc, 0xf9, 0xf2}

    ctr := []byte{0x69, 0xdd, 0xa8, 0x45, 0x5c, 0x7d, 0xd4, 0x25,
                  0x4b, 0xf3, 0x53, 0xb7, 0x73, 0x30, 0x4e, 0xec}

    plaintext := []byte{0x43, 0x54, 0x52, 0x20, 0x6d, 0x6f, 0x64, 0x65,
                        0x20, 0x6c, 0x65, 0x74, 0x73, 0x20, 0x79, 0x6f,
                        0x75, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x20,
                        0x61, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
                        0x20, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x20,
                        0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x62,
                        0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x63, 0x69, 0x70,
                        0x68, 0x65, 0x72, 0x2e}

    correct := []byte{0x0e, 0xc7, 0x70, 0x23, 0x30, 0x09, 0x8c, 0xe7,
                      0xf7, 0x52, 0x0d, 0x1c, 0xbb, 0xb2, 0x0f, 0xc3,
                      0x88, 0xd1, 0xb0, 0xad, 0xb5, 0x05, 0x4d, 0xbd,
                      0x73, 0x70, 0x84, 0x9d, 0xbf, 0x0b, 0x88, 0xd3,
                      0x93, 0xf2, 0x52, 0xe7, 0x64, 0xf1, 0xf5, 0xf7,
                      0xad, 0x97, 0xef, 0x79, 0xd5, 0x9c, 0xe2, 0x9f,
                      0x5f, 0x51, 0xee, 0xca, 0x32, 0xea, 0xbe, 0xdd,
                      0x9a, 0xfa, 0x93, 0x29}

    ciphertext, _ := counterMode(plaintext, key, ctr, incCtr)

    checkBytes("counterModeMessageOneEncrypt", ciphertext, correct, t)
}

func Test_counterModeMessageTwoEncrypt(t *testing.T) {
    key := []byte{0x36, 0xf1, 0x83, 0x57, 0xbe, 0x4d, 0xbd, 0x77,
                  0xf0, 0x50, 0x51, 0x5c, 0x73, 0xfc, 0xf9, 0xf2}

    ctr := []byte{0x77, 0x0b, 0x80, 0x25, 0x9e, 0xc3, 0x3b, 0xeb,
                  0x25, 0x61, 0x35, 0x8a, 0x9f, 0x2d, 0xc6, 0x17}

    plaintext := []byte{0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x61,
                        0x76, 0x6f, 0x69, 0x64, 0x20, 0x74, 0x68, 0x65,
                        0x20, 0x74, 0x77, 0x6f, 0x20, 0x74, 0x69, 0x6d,
                        0x65, 0x20, 0x70, 0x61, 0x64, 0x21}

    correct := []byte{0xe4, 0x62, 0x18, 0xc0, 0xa5, 0x3c, 0xbe, 0xca,
                      0x69, 0x5a, 0xe4, 0x5f, 0xaa, 0x89, 0x52, 0xaa,
                      0x0e, 0x31, 0x1b, 0xde, 0x9d, 0x4e, 0x01, 0x72,
                      0x6d, 0x31, 0x84, 0xc3, 0x44, 0x51}

    ciphertext, _ := counterMode(plaintext, key, ctr, incCtr)

    checkBytes("counterModeMessageTwoEncrypt", ciphertext, correct, t)
}

func Test_counterMode_BadKey(t *testing.T) {
    // key will be one byte short - should be caught by validateInput
    key := []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                  0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f}
                        
    ctr := []byte{0x77, 0x0b, 0x80, 0x25, 0x9e, 0xc3, 0x3b, 0xeb,
                  0x25, 0x61, 0x35, 0x8a, 0x9f, 0x2d, 0xc6, 0x17}

    plaintext := []byte{0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x61,
                        0x76, 0x6f, 0x69, 0x64, 0x20, 0x74, 0x68, 0x65,
                        0x20, 0x74, 0x77, 0x6f, 0x20, 0x74, 0x69, 0x6d,
                        0x65, 0x20, 0x70, 0x61, 0x64, 0x21}

    _, err := counterMode(plaintext, key, ctr, incCtr)

    if err.Error() != "key length must equal IV length!" {
        t.Error("Test_counterMode_BadKey failed!")
    }
}

